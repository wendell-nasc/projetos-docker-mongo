// ./mongo/init-replica.js
const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));

async function initializeReplica() {
    print("=== INICIALIZA√á√ÉO DO REPLICASET ===");

    // Aguarda o MongoDB estar pronto
    print("‚è≥ Aguardando MongoDB inicializar...");
    await sleep(10000);

    try {
        const status = rs.status();
        print("‚úÖ Replicaset j√° inicializado");
        return;
    } catch (error) {
        if (error.codeName === 'NotYetInitialized' || error.message.includes('not running with --replSet')) {
            print("üöÄ Inicializando replicaset...");

            // Pegando nome do replicaset via env ou default rs0
            const replicaSetName = typeof process !== "undefined" && process.env.MONGO_REPLICA_SET
                ? process.env.MONGO_REPLICA_SET
                : "rs0";

            const config = {
                _id: replicaSetName,
                members: [
                    { _id: 0, host: "mongo1:27017", priority: 2 },
                    { _id: 1, host: "mongo2:27017", priority: 1 },
                    { _id: 2, host: "mongo3:27017", priority: 1 }
                ]
            };

            try {
                rs.initiate(config);
                print("‚úÖ Replicaset iniciado");
            } catch (initError) {
                print("‚ö†Ô∏è Erro ao iniciar replicaset (talvez j√° iniciado):");
                printjson(initError);
            }

            // Aguarda estabiliza√ß√£o
            print("‚è≥ Aguardando elei√ß√£o...");
            await sleep(15000);

            // Cria usu√°rio admin se n√£o existir
            print("üë§ Verificando usu√°rio admin...");
            try {
                const users = db.getSiblingDB("admin").getUsers();
                const adminExists = users.some(u => u.user === "admin");

                if (!adminExists) {
                    db.getSiblingDB("admin").createUser({
                        user: "admin",
                        pwd: "password",
                        roles: [
                            { role: "root", db: "admin" },
                            { role: "clusterAdmin", db: "admin" }
                        ]
                    });
                    print("‚úÖ Usu√°rio admin criado");
                } else {
                    print("‚ÑπÔ∏è Usu√°rio admin j√° existe");
                }
            } catch (userError) {
                print("‚ö†Ô∏è Erro ao verificar/ criar usu√°rio:");
                printjson(userError);
            }

        } else {
            print("‚ùå Erro ao verificar replicaset:");
            printjson(error);
        }
    }
}

initializeReplica();
